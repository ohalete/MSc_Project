# Import And Pre-Processing

import numpy as np
import pandas as pd
import sklearn as sk
import seaborn as sns
import xgboost as xgb
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from matplotlib import pyplot as plt
from sklearn.tree import DecisionTreeClassifier, export_graphviz
from sklearn import tree
from sklearn.metrics import accuracy_score, confusion_matrix, r2_score
from sklearn.metrics import classification_report
from sklearn.ensemble import AdaBoostClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn import svm
from sklearn.svm import SVC
from sklearn.naive_bayes import GaussianNB
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import VotingClassifier
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import RandomizedSearchCV
from sklearn.linear_model import LogisticRegression

from sklearn.metrics import roc_curve
from sklearn.metrics import roc_auc_score
from xgboost import XGBRegressor
from sklearn.metrics import mean_squared_error

from sklearn.linear_model import LinearRegression

from sklearn.model_selection import StratifiedKFold,cross_val_score

from sklearn.ensemble import BaggingClassifier

# Load the PIMA csv file
Pima_dataset = pd.read_csv('PIMA.csv')

# View the first 10 records of PIMA dataset
Pima_dataset.head(10)

# Check details of the PIMA dataset, the Dimension of the dataset
Pima_dataset.shape

# Check details of all the Attributes
Pima_dataset.describe()

# Check for NULL Values
Pima_dataset.isna().sum()

print("NUMBER OF ROWS HAVING 0 GLUCOSE VALUE: {0}".format(len(Pima_dataset.loc[Pima_dataset['Glucose'] == 0])))
print("NUMBER OF ROWS HAVING 0 BLOOD PRESSURE VALUE: {0}".format(len(Pima_dataset.loc[Pima_dataset['BloodPressure'] == 0])))
print("NUMBER OF ROWS HAVING 0 SKIN THICKNESS VALUE: {0}".format(len(Pima_dataset.loc[Pima_dataset['SkinThickness'] == 0])))
print("NUMBER OF ROWS HAVING 0 INSULIN VALUE: {0}".format(len(Pima_dataset.loc[Pima_dataset['Insulin'] == 0])))
print("NUMBER OF ROWS HAVING 0 BMI VALUE: {0}".format(len(Pima_dataset.loc[Pima_dataset['BMI'] == 0])))
print("NUMBER OF ROWS HAVING 0 DIABETES PEDIGREE FUNCTION VALUE: {0}".format(len(Pima_dataset.loc[Pima_dataset['DiabetesPedigreeFunction'] == 0])))
print("NUMBER OF ROWS HAVING 0 AGE VALUE: {0}".format(len(Pima_dataset.loc[Pima_dataset['Age'] == 0])))

# Replace Missing Values with mean values
from sklearn.impute import SimpleImputer
imputer = SimpleImputer(strategy='mean', missing_values=0)
imputer = imputer.fit(Pima_dataset[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']])
Pima_dataset[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']] = imputer.transform(Pima_dataset [['Glucose','BloodPressure','SkinThickness','Insulin','BMI']])


print("NUMBER OF ROWS HAVING 0 GLUCOSE VALUE: {0}".format(len(Pima_dataset.loc[Pima_dataset['Glucose'] == 0])))
print("NUMBER OF ROWS HAVING 0 BLOOD PRESSURE VALUE: {0}".format(len(Pima_dataset.loc[Pima_dataset['BloodPressure'] == 0])))
print("NUMBER OF ROWS HAVING 0 SKIN THICKNESS VALUE: {0}".format(len(Pima_dataset.loc[Pima_dataset['SkinThickness'] == 0])))
print("NUMBER OF ROWS HAVING 0 INSULIN VALUE: {0}".format(len(Pima_dataset.loc[Pima_dataset['Insulin'] == 0])))
print("NUMBER OF ROWS HAVING 0 BMI VALUE: {0}".format(len(Pima_dataset.loc[Pima_dataset['BMI'] == 0])))
print("NUMBER OF ROWS HAVING 0 DIABETES PEDIGREE FUNCTION VALUE: {0}".format(len(Pima_dataset.loc[Pima_dataset['DiabetesPedigreeFunction'] == 0])))
print("NUMBER OF ROWS HAVING 0 AGE VALUE: {0}".format(len(Pima_dataset.loc[Pima_dataset['Age'] == 0])))

Pima_dataset.head(10)

Pima_dataset.shape

# Number of Outcomes that are positive and negative
Pima_dataset['Outcome'].value_counts()

# Split the Data (Train Test Split)

X = Pima_dataset.drop(columns='Outcome', axis=1)
Y = Pima_dataset['Outcome']

X_smote, X_test, y_smote, y_test = train_test_split(X, Y, test_size = 0.20, random_state = 0)

# URL: https://scikit-learn.org/stable/modules/generated/sklearn.feature_selection.mutual_info_classif.html
# Estimate mutual information for a discrete target variable.
# Mutual information (MI) between two random variables is a non-negative value, which measures the dependency between the variables.
# It is equal to zero if and only if two random variables are independent, and higher values mean higher dependency.
from sklearn.feature_selection import mutual_info_classif

mutual_info = mutual_info_classif(X_smote, y_smote, random_state = 0)
mutual_info

mutual_info = pd.Series(mutual_info)
mutual_info.index = X_smote.columns
mutual_info.sort_values(ascending = False)


plt.figure(figsize = (20, 8))
mutual_info.sort_values(ascending = False).plot.bar();

#So we decided to drp the DiabetesPedigreeFunction column
Pima_dataset.drop(columns='DiabetesPedigreeFunction',axis=1, inplace=True)

Pima_dataset.head(10)

Pima_dataset

Pima_dataset.to_csv('PIMA_projectdata_full.csv', sep=',', index=False, encoding='utf-8')

# Predict Insulin column in RTML DATA

X = Pima_dataset.drop(columns='Insulin', axis=1)
Y = Pima_dataset['Insulin']

X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.20, random_state = 0)

XGB = XGBRegressor(max_depth=10,learning_rate=0.1)
XGB.fit(X_train,y_train)
predictions_xgb = XGB.predict(X_test)

#mean square error
final_mse = mean_squared_error(y_test, predictions_xgb)
#mean square error
final_rmse = np.sqrt(final_mse)
final_rmse

# Load RTML dataset
RTML_dataset = pd.read_excel('RTMLwithoutinsulin.xlsx')

RTML_dataset.head()

# Check NULL Value
RTML_dataset.isna().sum()

# Predict Insulin value in RTML

X1 = RTML_dataset.drop(columns='Insulin', axis=1)
Y1 = RTML_dataset['Insulin']

Y1 = XGB.predict(X1)

Y1.shape

Y2= pd.DataFrame(Y1)

Y2

Y2.columns=['Insulin']

Y2

Y2.shape

# Merging The insulin column

RTML_dataset.columns
RTML_dataset.shape

RTML_dataset.head()

RTML_dataset.drop(columns='Insulin',axis=1, inplace=True)

RTML_dataset.head()

Y2.columns
Y2.shape

Y2.head()

Insulin_Merged = pd.concat([RTML_dataset, Y2], axis=1)

Insulin_Merged.columns

Insulin_Merged.shape

Insulin_Merged.head(10)

# Merge with PIMA DATASET

RTML_Merged = Insulin_Merged[["Pregnancies", "Glucose", "BloodPressure","SkinThickness","Insulin", "BMI", "Age","Outcome"]]

RTML_Merged.head(10)

RTML_Merged

RTML_Merged.to_csv('RTML_WITH_INSULIN.csv', sep=',', index=False, encoding='utf-8')

